<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP的拥塞控制</title>
      <link href="2021/05/20/TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
      <url>2021/05/20/TCP%E7%9A%84%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>某段时间，若对网络中某个资源的需求超过该资源提供的可用部分，网络性能会变坏，这种情况叫做拥塞。涉及到的带宽、交换结点中的缓存和处理机等，都是网络的资源。</p><h2 id="二、四种算法"><a href="#二、四种算法" class="headerlink" title="二、四种算法"></a>二、四种算法</h2><p>首先需要说明的是，以下讨论问题的传输单位是最大报文段（MSS）的个数为单位。不是以字节为单位。</p><h3 id="（一）慢开始"><a href="#（一）慢开始" class="headerlink" title="（一）慢开始"></a>（一）慢开始</h3><p>TCP建立连接后，拥塞窗口（cwnd）被设置为1，这时发送窗口（swnd）等于拥塞窗口大小，我们先假设拥塞门限值（ssthresh）为16。</p><p>慢开始的主要逻辑是，发送方收到第一个报文段确认之后，拥塞窗口增加到2，第二个传输轮次可以发送2个报文段。</p><p>发送方收到第二个报文段确认之后，拥塞窗口增加到4，第三个传输轮次可以发送4个报文段。以此指数增加。</p><h3 id="（二）拥塞避免"><a href="#（二）拥塞避免" class="headerlink" title="（二）拥塞避免"></a>（二）拥塞避免</h3><p>当拥塞窗口等于拥塞门限值16时，改用拥塞避免算法。</p><p>拥塞避免的主要逻辑是，每个传输轮次结束后，拥塞窗口线性增加1。即拥塞窗口增加到17。以此线性增加。</p><p>若在传输过程中出现了报文段的丢失，发送方重传计时器超时。若此时拥塞窗口是24，则拥塞门限值更新为当前窗口的一半，即12。拥塞窗口降低到1，并开始执行慢开始算法。</p><p>当拥塞窗口增大到新的拥塞门限值12时，改用拥塞避免算法。</p><h3 id="（三）快重传"><a href="#（三）快重传" class="headerlink" title="（三）快重传"></a>（三）快重传</h3><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>有时网络并未拥塞，仅有个别报文段的丢失，在拥塞避免的判断下，重传计时器超时，发送方误认为发生了网络拥塞。</p><p>此时发送方会开始执行慢开始算法，降低了传输效率。</p><h4 id="2-要点"><a href="#2-要点" class="headerlink" title="2.要点"></a>2.要点</h4><p>目的是使发送方尽快重传，避免触发重传计时器超时。<br>（1）接收方立即发送确认；</p><p>（2）接收方即使收到了失序报文，也要立即发送对已收到的报文段的重复确认；</p><p>（3）发送方收到3个连续的重复确认之后，就对相应的报文段立即重传；</p><p>（4）使用快重传算法后，整个网络吞吐量提高20%。</p><h4 id="3-举例"><a href="#3-举例" class="headerlink" title="3.举例"></a>3.举例</h4><p>发1，确认1；</p><p>发2，确认2；</p><p>发3，丢失；</p><p>发4，重复确认2；</p><p>发5，重复确认2；</p><p>发6，重复确认2；</p><p>发送方快重传3，确认6。</p><h3 id="（四）快恢复"><a href="#（四）快恢复" class="headerlink" title="（四）快恢复"></a>（四）快恢复</h3><p>快重传发生时，会执行快恢复。</p><p>发送方将拥塞门限值调整为当前窗口的一半，拥塞窗口也更新拥塞门限值的大小。然后执行拥塞避免算法。</p><h2 id="三、更新时间线"><a href="#三、更新时间线" class="headerlink" title="三、更新时间线"></a>三、更新时间线</h2><p>1988年，TCP Tahoe版本，提出慢开始和拥塞避免算法。</p><p>1990年，TCP Reno版本，增加了快重传和快恢复算法。改进了TCP的性能。</p><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><p>1.<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=59&spm_id_from=pageDriver">计算机网络微课堂</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 拥塞控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP的流量控制</title>
      <link href="2021/05/20/TCP%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
      <url>2021/05/20/TCP%E7%9A%84%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>意思是利用滑动窗口机制让发送方的发送速率不要太快，让接收方来得及接收。</p><h2 id="二、要点"><a href="#二、要点" class="headerlink" title="二、要点"></a>二、要点</h2><p>（一）接收方利用自己的接收窗口大小来限制发送方的发送窗口大小。<br>（二）发送方收到接收方的零窗口通知后，启动持续计时器。若持续计时器超时，发送方向接收方发送零窗口探测报文。</p><h2 id="三、相关题目"><a href="#三、相关题目" class="headerlink" title="三、相关题目"></a>三、相关题目</h2><p>题目：主机甲和主机乙之间建立了一个TCP连接，TCP最大段长度为1000字节，若主机甲的当前拥塞窗口为4000字节，在主机甲向主机乙连续发送两个最大段后，成功收到主机乙发送的第一个段的确认段，确认段中通告的接收窗口大小为2000字节，则此时主机甲还可以向主机乙发送的最大字节数是多少？</p><p>分析：TCP发送方的发送窗口是取拥塞窗口和接收方接收窗口的最小值。所以开始时发送方的发送窗口大小是4000字节。发送方收到第一个段的确认段后，发送窗口向前滑动，将第一个段的1000字节移出。此时发送窗口改为通告中的接收窗口大小2000字节。因为并未收到第二个段的确认，第二个段的1000字节仍在发送窗口中。所以发送方还可以再发送1000字节数据。</p><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><p>1.<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=59&spm_id_from=pageDriver">计算机网络微课堂</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP的区别</title>
      <link href="2021/05/14/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2021/05/14/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、对比"><a href="#一、对比" class="headerlink" title="一、对比"></a>一、对比</h2><table><thead><tr><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>无连接</td><td>面向连接</td></tr><tr><td>支持一对一、一对多、多对一和多对多的通信</td><td>只支持一对一，但支持全双工</td></tr><tr><td>直接打包用户层交付的报文</td><td>面向字节流</td></tr><tr><td>尽最大努力交付</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td>首部仅占8字节</td><td>首部占20~60字节</td></tr></tbody></table><h2 id="二、概念扩展"><a href="#二、概念扩展" class="headerlink" title="二、概念扩展"></a>二、概念扩展</h2><h3 id="（一）面向报文"><a href="#（一）面向报文" class="headerlink" title="（一）面向报文"></a>（一）面向报文</h3><p>应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序尽量选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。</p><h3 id="（二）面向字节流"><a href="#（二）面向字节流" class="headerlink" title="（二）面向字节流"></a>（二）面向字节流</h3><p>TCP发送报文时，是将应用层数据写入TCP缓冲区中，然后由TCP协议来控制发送这里面的数据，而发送的状态是按字节流的方式发送的，跟应用层写下来的报文长度没有任何关系，所以说是流。</p><h1 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h1><p>1.<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=59&spm_id_from=pageDriver">计算机网络微课堂</a></p><p>2.<a href="https://blog.csdn.net/ce123_zhouwei/article/details/8976006">面向报文UDP和面向字节流TCP的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP IP概念</title>
      <link href="2021/05/14/TCP-IP%E6%A6%82%E5%BF%B5/"/>
      <url>2021/05/14/TCP-IP%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、如何学习"><a href="#一、如何学习" class="headerlink" title="一、如何学习"></a>一、如何学习</h2><p>只看书学习是很枯燥的，并且死记硬背的东西不理解，记忆也不会牢固。所以后面的一些学习会有一些模拟实验的过程，借鉴一些前辈学习的经验。例如看完一个协议，可以通过抓包工具或者编写小程序加深理解的过程。</p><h2 id="二、TCP-IP概念"><a href="#二、TCP-IP概念" class="headerlink" title="二、TCP/IP概念"></a>二、TCP/IP概念</h2><p>首先IP是网络层协议，TCP UDP是传输层协议。</p><p>为什么需要IP协议，因为如果只依赖数据链路层Ethernet，数据包只能在广播域传播。</p><p>为什么需要TCP，因为众多应用层的协议需要实现可靠的数据包传输，如果没有TCP靠Ethernet并不能支持可靠传输的任务。而应用层期望得到的可靠传输机制是相同的，所以在此基础上抽象出TCP的概念。</p><p>TCP提供了封装的接口函数提供可靠传输，socket。用port来辨别应用层协议。</p><p>只要IP不需要TCP也是不可以的，IP可以标识的上层协议的数量是有限的，且大多被占用了。</p><p>UDP有什么好处，UDP可以标识的上层协议数多达65535种，UDP无状态，IP也是无状态，状态都由上层协议控制，这也是它被众多使用的原因。</p><h2 id="三、概念扩展"><a href="#三、概念扩展" class="headerlink" title="三、概念扩展"></a>三、概念扩展</h2><h3 id="（一）广播域"><a href="#（一）广播域" class="headerlink" title="（一）广播域"></a>（一）广播域</h3><p>任意连接到同一台以太网中继器或者交换机的电脑都属于一个广播域。其中任何一个节点可以在数据链路层通过广播的方式到达任意其他节点。</p><h3 id="（二）以太网中继器"><a href="#（二）以太网中继器" class="headerlink" title="（二）以太网中继器"></a>（二）以太网中继器</h3><p>中继器是用来加强电缆中的信号，把信号送得更远，以延展网络长度。信号强度会随着传递长度的增加而递减。因此需要中继器将信号重新加强以增加资料的发送距离。</p><h2 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a>巨人的肩膀</h2><p>1.<a href="https://www.zhihu.com/question/20583641/answer/104529492?f3fb8ead20=29d476a5746f5dd5ae8a296354e817de">通俗理解TCP IP</a></p><p>2.<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E6%92%AD%E5%9F%9F">广播域</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
